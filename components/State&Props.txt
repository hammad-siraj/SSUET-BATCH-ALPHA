
                                                      state and props

• Each component can store its own local information in its “state”
– Private and fully controlled by the component
– Can be passed as props to children
• Only class components can have local state


• State declared within the
constructor(){

class Menu extends Component {
constructor(props) {
super(props);
this.state = {
user: null
}
}
. . .
}




• State should only be modified
using setState()
onDishSelect(dish) {
this.setState({
user: name
});
}
• Never do the following:
this.state.user=name ;



JSX attributes are passed into a component as a single object
– Available in the component as “props”
– Can pass in multiple attributes
– Cannot modify props within the component
• Examples:
<App   props={  " user 2"} props2={"user3" }  />


///  REACTSTRAP :
npm install --save bootstrap
npm install --save reactstrap

npm install --save react-popper


import 'bootstrap/dist/css/bootstrap.min.css';

let arr2 =[ ];

 arr1.forEach( function(param){  arr2.push( param.id)    })



let arr3 = arr1.map( function(param){ return param.id  } )

es6
let arr2 = arr1.map((param)=> param.id)


let arr1 = [

{id:0,
name:"user1"},

{id:1,
name:"user1"},

{id:2,
name:"user1"},

]




flow of react :

class xyz extends react.component {
constructor(props){
super(props);


render(){

return (

user interface
)

}


}




}









es6:

destructuring
 map()
ternary operator
string literals
 filter()


react 
input handler







